{"version":3,"sources":["live-streaming/LiveStreaming.js","App.js","reportWebVitals.js","index.js"],"names":["mainStreamId","rtc","client","joined","published","localStream","remoteStreams","params","localAudioTrack","option","cameraVideoProfile","joinChannel","role","AgoraRTC","createClient","mode","codec","init","console","log","token","userID","join","uid","createStream","streamID","audio","video","screen","setVideoProfile","play","publish","err","$","prop","click","toggleBtn","toggleClass","hasClass","enableAudio","toggleVisibility","disableAudio","toggleMic","enableVideo","disableVideo","toggleVideo","enableUiControls","localStreams","camera","stream","createCameraStream","id","joinChannels","document","getElementById","disabled","setClientRole","error","on","evt","remoteStream","getId","subscribe","muted","remoteId","pause","btn","elementID","visible","attr","LiveVideoStreaming","props","className","onClick","unpublish","alert","leave","ev","class","type","style","width","height","display","margin","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2047003f.chunk.js","sourcesContent":["import React from 'react';\r\nimport AgoraRTC from \"agora-rtc-sdk\";\r\nimport $ from 'jquery';\r\n\r\nvar rtc = {\r\n    client: null,\r\n    joined: false,\r\n    published: false,\r\n    localStream: null,\r\n    remoteStreams: [],\r\n    params: {},\r\n    localAudioTrack: null,\r\n};\r\n\r\n// Options for joining a channel\r\nvar option = {\r\n    appID: \"a86a315fcd594277ac1ffb6cd6990fed\",\r\n    channel: \"video-calling\",\r\n    uid: null,\r\n    token: \"\",\r\n    key: '',\r\n    secret: ''\r\n}\r\n\r\nvar mainStreamId; // reference to main stream\r\nvar cameraVideoProfile = '480_4'; \r\n\r\n// var audioControl = document.body.addEventListener(\"touchstart\");\r\n\r\nfunction joinChannel(role) {\r\n    // Create a client\r\n    rtc.client = AgoraRTC.createClient({ mode: \"live\", codec: \"h264\" });\r\n    // Initialize the client\r\n    rtc.client.init(option.appID, function () {\r\n        console.log(\"init success\");\r\n        // Join a channel\r\n        joinChannels();\r\n        rtc.client.join(option.token ?\r\n            option.token : null,\r\n            option.channel, option.uid ? +option.uid : null, function (uid) {\r\n                console.log(\"join channel: \" + option.channel + \" success, uid: \" + uid);\r\n                rtc.params.uid = uid;\r\n                if (role === \"host\") {\r\n\r\n                    document.getElementById(\"remote_video_\").disabled = true;\r\n\r\n                    rtc.client.setClientRole(\"host\");\r\n                    // Create a local stream\r\n\r\n                    rtc.localStream = AgoraRTC.createStream({\r\n                        streamID: rtc.params.uid,\r\n                        audio: true,\r\n                        video: true,\r\n                    })\r\n\r\n                    // Initialize the local stream\r\n                    rtc.localStream.init(function () {\r\n                        console.log(\"init local stream success\");\r\n                        rtc.localStream.play(\"local_stream\");\r\n                        rtc.client.publish(rtc.localStream, function (err) {\r\n                            console.log(\"publish failed\");\r\n                            console.error(err);\r\n                        })\r\n                    }, function (err) {\r\n                        console.error(\"init local stream failed \", err);\r\n                    });\r\n\r\n                    rtc.client.on(\"connection-state-change\", function (evt) {\r\n                        console.log(\"audience\", evt)\r\n                    })\r\n\r\n                }\r\n                if (role === \"audience\") {\r\n\r\n                    document.getElementById(\"local_stream\").disabled = true;\r\n\r\n                    rtc.client.on(\"connection-state-change\", function (evt) {\r\n                        console.log(\"audience\", evt)\r\n                    })\r\n\r\n                    rtc.client.on(\"stream-added\", function (evt) {\r\n                        var remoteStream = evt.stream;\r\n                        var id = remoteStream.getId();\r\n                        if (id !== rtc.params.uid) {\r\n                            rtc.client.subscribe(remoteStream, function (err) {\r\n                                console.log(\"stream subscribe failed\", err);\r\n                            })\r\n                        }\r\n                        console.log('stream-added remote-uid: ', id);\r\n                    });\r\n\r\n                    rtc.client.on(\"stream-removed\", function (evt) {\r\n                        var remoteStream = evt.stream;\r\n                        var id = remoteStream.getId();\r\n                        console.log('stream-removed remote-uid: ', id);\r\n                    });\r\n\r\n\r\n                    rtc.client.on(\"stream-subscribed\", function (evt) {\r\n                        var remoteStream = evt.stream;\r\n                        var id = remoteStream.getId();\r\n                        mainStreamId = id;\r\n                        remoteStream.play(\"remote_video_\", {muted: true});\r\n\r\n                        console.log('stream-subscribed remote-uid: ', id);\r\n                    })\r\n\r\n                    rtc.client.on(\"mute-audio\", function (evt) {\r\n                        toggleVisibility('#' + evt.uid + '_mute', true);\r\n                      });\r\n                      \r\n                    rtc.client.on(\"unmute-audio\", function (evt) {\r\n                        toggleVisibility('#' + evt.uid + '_mute', false);\r\n                      });\r\n                      \r\n                      // show user icon whenever a remote has disabled their video\r\n                    rtc.client.on(\"mute-video\", function (evt) {\r\n                        var remoteId = evt.uid;\r\n                        // if the main user stops their video select a random user from the list\r\n                        if (remoteId !== mainStreamId) {\r\n                          // if not the main vidiel then show the user icon\r\n                          toggleVisibility('#' + remoteId + '_no-video', true);\r\n                        }\r\n                      });\r\n                      \r\n                    rtc.client.on(\"unmute-video\", function (evt) {\r\n                        toggleVisibility('#' + evt.uid + '_no-video', false);\r\n                      });\r\n                      \r\n\r\n                    rtc.client.on(\"stream-unsubscribed\", function (evt) {\r\n                        var remoteStream = evt.stream;\r\n                        var id = remoteStream.getId();\r\n                        remoteStream.pause(\"remote_video_\");\r\n                        console.log('stream-unsubscribed remote-uid: ', id);\r\n                    })\r\n                }\r\n            }, function (err) {\r\n                console.error(\"client join failed\", err)\r\n            })\r\n\r\n    }, (err) => {\r\n        console.error(err);\r\n    });\r\n}\r\n\r\nfunction leaveEventHost(params) {\r\n    rtc.client.unpublish(rtc.localStream, function (err) {\r\n        console.log(\"publish failed\");\r\n        alert('You left the meeting as Host')\r\n        console.error(err);\r\n    })\r\n    rtc.client.leave(function (ev) {\r\n        console.log(ev)\r\n    })\r\n}\r\n\r\nfunction leaveEventAudience(params) {\r\n    rtc.client.leave(function () {\r\n        console.log(\"client leaves channel\");\r\n        alert('Left the meeting as an audience')\r\n    }, function (err) {\r\n        console.log(\"client leave failed \", err);\r\n    })\r\n}\r\n\r\nfunction joinChannels() {\r\n    var token = generateToken();\r\n    var userID = null; // set to null to auto generate uid on successfull connection\r\n    rtc.client.join(token, null, userID, function(uid) {\r\n        console.log(\"User \" + uid + \" join channel successfully\");\r\n        createCameraStream(uid);\r\n        rtc.localStreams.camera.id = uid; // keep track of the stream uid \r\n    }, function(err) {\r\n        console.log(\"[ERROR] : join channel failed\", err);\r\n    });\r\n  }\r\n  \r\n  // video streams for channel\r\n  function createCameraStream(uid) {\r\n    var localStream = AgoraRTC.createStream({\r\n      streamID: uid,\r\n      audio: true,\r\n      video: true,\r\n      screen: false\r\n    });\r\n    localStream.setVideoProfile(cameraVideoProfile);\r\n    localStream.init(function() {\r\n      console.log(\"getUserMedia successfully\");\r\n      // TODO: add check for other streams. play local stream full size if alone in channel\r\n      localStream.play('local-video'); // play the given stream within the local-video div\r\n  \r\n      // publish local stream\r\n      rtc.client.publish(localStream, function (err) {\r\n        console.log(\"[ERROR] : publish local stream error: \" + err);\r\n      });\r\n    \r\n      enableUiControls(localStream); // move after testing\r\n      rtc.localStreams.camera.stream = localStream; // keep track of the camera stream for later\r\n    }, function (err) {\r\n      console.log(\"[ERROR] : getUserMedia failed\", err);\r\n    });\r\n  }\r\n\r\n  function generateToken() {\r\n    return null; // TODO: add a token generation\r\n  }\r\n\r\nfunction enableUiControls(localStream) {\r\n\r\n    $(\"#mic-btn\").prop(\"disabled\", false);\r\n    $(\"#video-btn\").prop(\"disabled\", false);\r\n  \r\n    $(\"#mic-btn\").click(function(){\r\n      toggleMic(localStream);\r\n    });\r\n  \r\n    $(\"#video-btn\").click(function(){\r\n      toggleVideo(localStream);\r\n    });\r\n}\r\n  \r\n  function toggleBtn(btn){\r\n    btn.toggleClass('btn-dark').toggleClass('btn-danger');\r\n  }\r\n  \r\n  function toggleScreenShareBtn() {\r\n    $('#screen-share-btn').toggleClass('btn-danger');\r\n    $('#screen-share-icon').toggleClass('fa-share-square').toggleClass('fa-times-circle');\r\n  }\r\n  \r\n  function toggleVisibility(elementID, visible) {\r\n    if (visible) {\r\n      $(elementID).attr(\"style\", \"display:block\");\r\n    } else {\r\n      $(elementID).attr(\"style\", \"display:none\");\r\n    }\r\n  }\r\n  \r\nfunction toggleMic(localStream) {\r\n    toggleBtn($(\"#mic-btn\")); // toggle button colors\r\n    $(\"#mic-icon\").toggleClass('fa-microphone').toggleClass('fa-microphone-slash'); // toggle the mic icon\r\n    if ($(\"#mic-icon\").hasClass('fa-microphone')) {\r\n      localStream.enableAudio(); // enable the local mic\r\n      toggleVisibility(\"#mute-overlay\", false); // hide the muted mic icon\r\n    } else {\r\n      localStream.disableAudio(); // mute the local mic\r\n      toggleVisibility(\"#mute-overlay\", true); // show the muted mic icon\r\n    }\r\n  }\r\n  \r\nfunction toggleVideo(localStream) {\r\n    toggleBtn($(\"#video-btn\")); // toggle button colors\r\n    $(\"#video-icon\").toggleClass('fa-video').toggleClass('fa-video-slash'); // toggle the video icon\r\n    if ($(\"#video-icon\").hasClass('fa-video')) {\r\n      localStream.enableVideo(); // enable the local video\r\n      toggleVisibility(\"#no-local-video\", false); // hide the user icon when video is enabled\r\n    } else {\r\n      localStream.disableVideo(); // disable the local video\r\n      toggleVisibility(\"#no-local-video\", true); // show the user icon when video is disabled\r\n    }\r\n}\r\n\r\n$(\"#mic-btn\").prop(\"disabled\", true);\r\n$(\"#video-btn\").prop(\"disabled\", true);\r\n\r\nfunction LiveVideoStreaming(props) {\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <button className=\"btn my-2\" onClick={() => joinChannel('host')}>Join Channel as Host</button>\r\n            <button className=\"btn\" onClick={() => joinChannel('audience')}>Join Channel as Audience</button>\r\n            <button className=\"btn\" onClick={() => leaveEventHost('host')}>Leave Event Host</button>\r\n            <button className=\"btn\" onClick={() => leaveEventAudience('audience')}>Leave Event Audience</button>\r\n            \r\n            \r\n        </div>\r\n\r\n        <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n            <button id=\"mic-btn\" type=\"button\" class=\"btn btn-block btn-dark btn-lg\">\r\n\t\t\t    <i id=\"mic-icon\" class=\"fas fa-microphone\"></i>\r\n\t\t    </button>\r\n            </div>\r\n            <div class=\"col-sm\">\r\n            <button id=\"video-btn\"  type=\"button\" class=\"btn btn-block btn-dark btn-lg\">\r\n\t\t\t    <i id=\"video-icon\" class=\"fas fa-video\"></i>\r\n\t\t    </button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n            <div id=\"local_stream\" className=\"local_stream\" style={{ width: \"100%\", height: \"100vh\", display: \"flex\"}}></div>\r\n            </div>\r\n            <div class=\"col-sm\">\r\n            <div\r\n                id=\"remote_video_\"\r\n                style={{ margin:'0px' ,width: \"100%\", height: \"100vh\", display: \"flex\"}}\r\n            >\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    );\r\n}   \r\n\r\nexport default LiveVideoStreaming;","\nimport './App.css';\nimport LiveVideoStreaming from './live-streaming/LiveStreaming';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LiveVideoStreaming></LiveVideoStreaming>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}